pub mod kernel;

#[test]
fn test_sample() {
    use crate::kernel::backend::grid_sample;
    use burn::backend::wgpu::WgpuDevice;
    use burn::backend::wgpu::WgpuRuntime;
    use burn::prelude::Tensor;
    //use burn::tensor::Distribution;
    use burn_jit::JitBackend;

    type Wgpu = JitBackend<WgpuRuntime, f32, i32, u32>;
    let device = WgpuDevice::DefaultDevice;
    let v: Tensor<Wgpu, 4> = Tensor::from_data(
        [[
            [
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
                [0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9],
                [0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8],
                [0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7],
                [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],
                [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],
                [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
                [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
                [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
            ],
            [
                [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
                [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2],
                [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3],
                [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4],
                [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5],
                [0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6],
                [0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7],
                [0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8],
                [0.2, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9],
                [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0],
            ],
            [
                [0.5, 0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6],
                [0.6, 0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5],
                [0.7, 0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4],
                [0.8, 0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3],
                [0.9, 1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2],
                [1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1],
                [0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2],
                [0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3],
                [0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4],
                [0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.2, 0.3, 0.4, 0.5],
            ],
        ]],
        &device,
    ) * 255.0;
    let g: Tensor<Wgpu, 4> = Tensor::from_data(
        [[
            [
                [-1.0, -1.0],
                [-0.7, -1.0],
                [-0.4, -1.0],
                [-0.1, -1.0],
                [0.2, -1.0],
                [0.5, -1.0],
                [0.8, -1.0],
                [1.0, -1.0],
            ],
            [
                [-1.0, -0.7],
                [-0.7, -0.7],
                [-0.4, -0.7],
                [-0.1, -0.7],
                [0.2, -0.7],
                [0.5, -0.7],
                [0.8, -0.7],
                [1.0, -0.7],
            ],
            [
                [-1.0, -0.4],
                [-0.7, -0.4],
                [-0.4, -0.4],
                [-0.1, -0.4],
                [0.2, -0.4],
                [0.5, -0.4],
                [0.8, -0.4],
                [1.0, -0.4],
            ],
            [
                [-1.0, -0.1],
                [-0.7, -0.1],
                [-0.4, -0.1],
                [-0.1, -0.1],
                [0.2, -0.1],
                [0.5, -0.1],
                [0.8, -0.1],
                [1.0, -0.1],
            ],
            [
                [-1.0, 0.2],
                [-0.7, 0.2],
                [-0.4, 0.2],
                [-0.1, 0.2],
                [0.2, 0.2],
                [0.5, 0.2],
                [0.8, 0.2],
                [1.0, 0.2],
            ],
            [
                [-1.0, 0.5],
                [-0.7, 0.5],
                [-0.4, 0.5],
                [-0.1, 0.5],
                [0.2, 0.5],
                [0.5, 0.5],
                [0.8, 0.5],
                [1.0, 0.5],
            ],
            [
                [-1.0, 0.8],
                [-0.7, 0.8],
                [-0.4, 0.8],
                [-0.1, 0.8],
                [0.2, 0.8],
                [0.5, 0.8],
                [0.8, 0.8],
                [1.0, 0.8],
            ],
            [
                [-1.0, 1.0],
                [-0.7, 1.0],
                [-0.4, 1.0],
                [-0.1, 1.0],
                [0.2, 1.0],
                [0.5, 1.0],
                [0.8, 1.0],
                [1.0, 1.0],
            ],
        ]],
        &device,
    );
    //println!("{:?}", v.shape());
    //println!("{:?}", g.shape());
    let out = grid_sample(v, g);
    println!("{}", out);
}
